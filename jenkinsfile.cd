pipeline {
    agent any

    environment {
        // Define your AWS credentials (Access Key ID and Secret Access Key)
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        AWS_REGION            = 'us-east-1'
        ECR_REPOSITORY        = 'practise_123'
        EKS_CLUSTER_NAME      = 'your-eks-cluster-name'
        KUBECONFIG_PATH       = '/path/to/kubeconfig'
        DOCKER_IMAGE_NAME     = 'your-docker-image-name'
        K8S_DEPLOYMENT_NAME   = 'your-deployment-name'
        K8S_SERVICE_NAME      = 'your-service-name'
        K8S_SERVICE_PORT      = 'your-service-port'
        Destination_Server_IP = ''
    }

    stages {
        stage('SSH to App sever') {
            steps {
                script {
                    sh "ssh root@ ${Destination_Server_IP}"
                }
            }
        }

        stage('Pull Image from ECR') {
            steps {
                script {
                    // Configure AWS CLI
                    withAWS(credentials: 'aws-credentials') {
                        sh "aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}"
                        sh "aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}"
                        sh "aws configure set region ${AWS_REGION}"
                    
                        // Authenticate Docker with ECR
                        sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

                        // Pull Docker image from ECR
                        sh "docker pull ${ECR_REPOSITORY}/${DOCKER_IMAGE_NAME}:latest"
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    // Configure kubectl to use EKS cluster
                    sh "kubectl config use-context ${EKS_CLUSTER_NAME} --kubeconfig=${KUBECONFIG_PATH}"

                    // Apply Kubernetes deployment configuration
                    sh "kubectl apply -f your-kubernetes-deployment.yaml"

                    // Apply Kubernetes service configuration
                    sh "kubectl apply -f your-kubernetes-service.yaml"
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
